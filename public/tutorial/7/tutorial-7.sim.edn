(refer 'protean.core.transformation.sim)
(require '[clojure.string :refer [join]])

(defn format [list] (join " " (map #(symbol (name %)) list)))

(def world (atom
{
  'office-cubicle '((you are in your office cubicle -)
    (west exit walkway))
  'walkway '((you are in the walkway at the side of the office -
    there is a photocopier in front of you -)
    (east exit office-cubicle)
    (north exit reception)
    (south exit bobs-office))
  'reception '((you are in reception -
    there is a receptionist droning on repetitively -)
    (south exit walkway))
  'bobs-office '((you in the Bobs office -
    there are two bobs expenctantly waiting to talk to you -)
    (north exit walkway))
}))

(def location (atom 'office-cubicle))

(defn describe-location [location world] (first (location world)))

(defn describe-path [path]
  `(there is an ~(second path) going ~(first path) from here -))

(defn describe-paths [location world]
  (apply concat (map describe-path (rest (get world location)))))

(defn look []
  (format (concat (describe-location @location @world)
                      (describe-paths @location @world))))

(defn go [direction]
  (let [next (first (filter (fn [x] (= direction (first x))) (rest (@location @world))))]
    (cond next (do (def location (atom (nth next 2))) (look))
          :else '(you cannot go that way -))))

(defn go-rest []
  (let [dir (symbol (get-in *request* [:query-params "direction"]))]
    (rsp (go dir))))

{
  "tutorial-7" {
    "look" {:get [#(rsp (look))]}
    "go" {:put [#(go-rest)]}
  }
}
