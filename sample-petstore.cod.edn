;; Sample API codex
;;
;; We call Protean Project/Service configurations codices
;; The sample codex illustrates most if not all of what is possible
;; with Protean
;;

{
  :includes [ "defaults.edn" ]

  :title "Pet Store API Docs"

  "petstore" {

    :types {
      :Status "(available|pending|sold)"
    }
    :vars {
      "status" {:type :Status :doc "Updated status of the pet"}
    }

    "api/pet" {

      :put {
        :description "Full description for update an existing pet"
        :doc "Update an existing pet"
        :rsp {
          :200 {
            ;; no need for a header, it is computed from the body file
            :body "test-data/content/doc/responses/simple/200-ref.json"
          }

          :400 {
            :doc "Pet not found"
          }

          :404 {
            :doc "Invalid ID supplied"
          }

          :405 {
            :doc "Validation exception"
            ;; override the content type calculated from the file extension
            :headers {"Content-Type" "application/problem+json" "Content-Language" "en"}
            :body "test-data/content/problems/bad-custom-domain-field.json"
          }
        }
      }

      :post {
        :doc "Add a new pet to the store"
        :rsp {
          :405 {
            :doc "Validation exception"
          }
        }
      }

    }

    "api/pet/${petId}" {

      :types {
        :PetId "[0-9a-zA-Z]{3,7}"
      }
      :vars {
        "petId" {:type :PetId :doc "ID of pet"}
      }

      :post {
        :doc "Updates a pet in the store with form data"
        :req {
          :query-params {:required {"name" "${name}" "status" "${status}"}}
          :body {"name" "${name}" "status" "${status}"} ; an alternative to query-params (should have required/optional?)
        }
        :rsp {
          :405 {
            :doc "Validation exception"
          }
        }
        :vars {
          "name" {:type :String :doc "Updated name of the pet"}
          "status" {:type :Status :doc "Updated status of the pet"}
        }
      }

      :get {
        :doc "Find a pet by ID"

        :rsp {
          :200 {
            :body "test-data/content/doc/responses/simple/200-ref.json"
          }

          :404 {
            :doc "Invalid ID supplied"
          }

          :405 {
            :doc "Validation exception"
            ;; override the content type calculated from the file extension
            :headers {"Content-Type" "application/problem+json" "Content-Language" "en"}
            :body "test-data/content/problems/bad-custom-domain-field.json"
          }
        }
      }

      :delete {
        :doc "Deletes a pet"

        :rsp {
          :404 {
            :doc "Invalid ID supplied"
          }
        }
      }

      :patch {
        :doc "Partial updates to a pet"
        :rsp {
          :404 {
            :doc "Invalid ID supplied"
          }
        }
      }

    }

    "api/pet/findByStatus" {
      :get {
        :doc "Finds pets by status"
        :req {
          :query-params {:optional {"status" "${status}"}}
        }
      }
    }

    "api/pet/findByTags" {
      :get {
        :doc "Finds pets by tags"
        :req {
          :query-params {:required {"tags" "${tags}"}}
        }
        :vars {"tags" {:type :String :doc "Tags to filter by"}}
      }
    }

    "api/pet/uploadImage" {
      :post {
        :doc "uploads an image"
        :req {
          :query-params {:required {"additionalMetadata" "${additionalMetadata}"}}
;           {"file" {:type :File}} ; Binary?; Multipart?
        }
        :vars {"additionalMetadata" {:type :String, :doc "Additional data to pass to server"}}
      }
    }
  }
}
