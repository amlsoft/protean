;; Sample API codex
;;
;; We call Protean Project/Service configurations codices
;; The sample codex illustrates most if not all of what is possible
;; with Protean
;;

{
  :rsp {:headers {"X-Powered-By" "Protean"}}
  :types {
    :String "[ -~]*" ; all ASCII chars between space and tilde are the printable chars.
    :Date "(19|20)[0-9][0-9]\\-(0[1-9]|1[0-2])\\-(0[1-9]|([12][0-9]|3[01]))"
    :Time "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]"
    :DateTime "(19|20)[0-9][0-9]\\-(0[1-9]|1[0-2])\\-(0[1-9]|([12][0-9]|3[01]))T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](Z|\\+[0-1][0-9]:[03]0)"
    :Ip "((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
  }

  "petstore" {

    "api/pet" {

      :put {
        :doc "Update an existing pet"
        :errors {:status [400 404 405]} ; Need to document the error codes
      }

      :post {
        :doc "Add a new pet to the store"
        :errors {:status [405]}
      }

    }
  
    "api/pet/*" {

      :types {
        :PetId "[0-9a-zA-Z]{3,7}"
      }

      :post {
        :doc "Updates a pet in the store with form data"
        :req {
          :query-params {:required {"name" "psv+name" "status" "psv+status"}}
          :vars {
            "pet/psv+" {:type :PetId :doc "ID of pet that needs to be updated"}
            "name" {:type :String, :doc "Updated name of the pet"}
            "status" {:type "(available|pending|sold)", :doc "Updated status of the pet"}
          }
        }
        :errors {:status [405]}
      }

      :get {
        :doc "Find a pet by ID"
        :req {
          :vars {"pet/psv+" {:type "[0-9a-zA-Z]{3,7}" :doc "ID of pet that needs to be fetched"}}
        }
        :errors {:status [400 404]}
      }

      :delete {
        :doc "Deletes a pet"
        :req {
          :vars {"pet/psv+" {:type "[0-9a-zA-Z]{3,7}" :doc "ID of pet that needs to be deleted"}}
        }
      }

      :patch {
        :doc "Partial updates to a pet"
        :req {
          :vars {"pet/psv+" {:type "[0-9a-zA-Z]{3,7}" :doc "ID of pet that needs to be patched"}}
        }
      }

    }

    "api/pet/findByStatus" {
      :get {
        :doc "Finds pets by status"
        :query-params {:optional {"status" {:type "(available|pending|sold)" :doc "Status values that need to be considered for filter. available is default."}}}
      }
    }

    "api/pet/findByTags" {
      :get {
        :doc "Finds pets by tags"
        :query-params {:required {"tags" {:type :String :doc "Tags to filter by"}}}
      }
    }

    "api/pet/uploadImage" {
      :post {
        :doc "uploads an image"
        :query-params {:required {"additionalMetadata" {:type :String, :doc "Additional data to pass to server"}}
;           {"file" {:type :File}} ; Binary?; Multipart?
        }
      }
    }
  }
}
